Installing Redis in Ubuntu
    https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-18-04
    Installing and Configuring Redis
        sudo apt update
        sudo apt install redis-server
        sudo vi /etc/redis/redis.conf
            supervised systemd
        sudo systemctl restart redis.service
    Testing Redis
        sudo systemctl status redis
        redis-cli
        127.0.0.1:6379> ping
        set test "It's working!"
    exit 
        to back ubuntu user 

    https://otodiginet.com/database/how-to-install-and-configure-redis-6-0-on-ubuntu-20-04-lts/
    sudo add-apt-repository ppa:chris-lea/redis-server
    sudo apt-get update
    sudo apt-get install redis-server -y
    redis-server --version
    sudo systemctl restart redis-server.service
    sudo systemctl status redis-server.service
    
    ====================================================================

                Introduction to Keys in Redis

Working with Keys in Redis
    sudo systemctl status redis
    redis-cli
    set 1 "hello"
    get 1
    del 1
    set 1 "hello"
    set 2 "name"
    del 1 2
    To check key exist or not: exists
        exists 1
    Check multi key 
        EXISTS 1 2 name
    Using expire, can expire a key within with some period of time
        set a "hello" EX 10
            EX by second 
        ttl a
            check a key expire
            ttl is time to live command, we can get how many seconds are left for key
            If key is dead or key is removed then we will get minus 2
            If key exist but there is no expiration on that key then we will get minus 1
        set 1 "hello"
        then we can set expiration for 1 key by command
        Expire 1 20
        Expire a key in milli seconds
            set 1 "hello" PX 100
        Check time in milli seconds
            pttl 1
        Set time for exist key in milli second
            set 1 "hello"
            pexpire 1 100000
Pattern Matching with Keys
    set hello 1
    get hello
    set hallo 2
    set hrllo 2
    set heello 2
    set hijllo 2
    keys h?llo
        1) "hallo"
        2) "hrllo"
        3) "hello
    keys h*llo
        1) "hallo"
        2) "heello"
        3) "hrllo"
        4) "hijllo"
        5) "hello"
    keys h[ae]llo
    keys h[^e]llo
    keys h[e-r]llo
    keys *ll*
    keys h????
Understanding Shutdown Command
    Setting some keys, and then shutdown affect those keys
    set 1 hello
    set 2 bye 
    shutdown save 
    shutdown nosave
Some more commands
    RANDOMKEY: Get any key from database
    keys *: show all keys we have 
    rename: change key name 
        RENAME 1 4
    If rename to new key but that new key is existing, it will replace existing key and existing will no longer 
    Can only rename key only when our key does not exist.
        set name "bob"
        set lname "rob"
        renamenx name lname
        renamenx name fname
        unlink: Very similar to del command. unlink command remove our key asynchronously, It does remove key by blocking 
            the current thread, it performs its job in another thread.
            It is very useful sometimes when we want to delete large number of keys, at that time if using del command, it will
            eat our performance and can slow our Redis database
    type: check what type of value is stored in key
        type lname
Dump & Restore in Redis
    dump: Use to take backup of our data stored in key, accidentally our data is deleted we can store that data
        set name "Bob"
        dump name
        del name
        restore name 0 "\x00\x03Bob\b\x00\x12\x8a\xfbJ\xdf/\xc4\t"
    If restore key while target key name already exist, we can use "replace" option
        restore name 0 "\x00\x03Bob\b\x00\x12\x8a\xfbJ\xdf/\xc4\t" replace
    Restore "name" key of value as new name is "fname"
        set fname "abc"
        restore fname 0 "\x00\x03Bob\b\x00\x12\x8a\xfbJ\xdf/\xc4\t" replace
        get fname
            -> "Bob"
    
    ====================================================================

                Strings in  Redis
    
Getting Started with Strings
    set 1 abc
    type: check type value of key 
        type 1 -> string
    set 2 "hello"
    type 2
        -> will also be string
    nx option: Using nx option we only set the key if it does not already exist, it means that we 
        can not create a key if it is already existing in Redis database
        set 1 hello nx
            Because 1 key is existing so we can not set
    xx option: Only set the key if it already exists, it just opposite of nx option
        set 5 hello xx
            The key 5 is not yet created in Redis database, so we can not set
        set 1 hello xx
            Can set, key 1 will have value is "hello"
    append: Using append command to append a value to string
        set greeting Hello
        append greeting World
    incr: Using to increment a value. In Redis we can perform some operations on string type, in many of database it is imposible
        set score 1
        incr score
        get score -> its value will become "2"
    incrby: We can specify which number we want to increment our value
        incrby score 5
            -> score will have value is 7
    decr: Decrement value by 1
        decr score
        -> score will have value is 6
    decrby: We can specify which number we want to Decrement our value
        decrby score 5
            -> score will have value is 1
    incrbyfloat: We can store float value also in we string and also perform some operations
        set num 1.0 (type is string)
        incrbyfloat num 1.0
            -> num will have value is 2
Different Ways to work with String
    getset: This command we can set new value like set command, the special of this command is when
        we set a new value to a key then the value stored at that key previously will be returned as output.
        It means this command we can see what was the previous value of that key
        set 1 hello
        getset 1 bye
    If getset give a key name which is not existed in the database, we will get "nil" in output
        getset 2 hello
    mset: Can set multiple keys at same time
        mset 1 h 2 g 3 e
    mget: retrieve value from the multiple keys 
        mget 1 2 3
    msetnx: key must not exist in the database to create new key
        msetnx 5 hello 6 bye
Wrapping up String Section
    getrange: Use to extract a substring from a string
        set name samsung
        getrange name 0 3
            -> "sams"
    getrange can get range start from last character with minus
        getrange name 0 -1
            -> "samsung"
        getrange name -3 -2
    setex: create a key and we can set expiry of it
        setex a 5 hello
        keys *
    psetex: Can set expiry of key in millisecond
    setrange: We can overwrite a part of string
        set k1 "Hello World"
        setrange k1 6 Redis
        get k1
            -> will get Hello Redis
    strlen: Return string length
        strlen k1
            -> return 11

    ====================================================================

                List in Redis

Working with List in Redis
    lpush: Insert all the specified values at the head of the list stored at key
    lrange: Returns the specified elements of the list stored at key
    rpush: Insert all the specified values at the tail of the list stored at key.
    rpushx: Inserts value at the tail of the list stored at key, only if key already exists and holds a list.
        rpushx fruitsss mango
        if fruitsss not already exists, it will be not inserted
    lpushx: Inserts value at the head of the list stored at key, only if key already exists and holds a list.
    rpop: Removes and returns the last element of the list stored at key(Delete element from the right of list)
    lpop: Removes and returns the first element of the list stored at key
Wrapping up List Commands
    ltrim: Trim an existing list so that it will contain only the specified range of elements specified
        The range we provided will be kept, and all other elements will be deleted from list.
    lset: Sets the list value at index to value.
    lindex: Returns the value at index in the list stored at key.
    linsert: Inserts value in the list stored at key either before or after pivot(pivot is the reference value)
    llen: Returns the length of the list stored at key. 
    lrem: Removes the first count occurrences of elements equal to value from the list stored at key.(delete count times if having equal to value)
        count > 0: Remove elements equal to value moving from head to tail 
        count < 0: Remove elements equal to value moving from tail to head
        count = 0: Remove all elements equal to value.

    ====================================================================

                Hashes in Redis

Hashes Introduction
    Redis Hashes are maps between string fields and string values
    They are the perfect data type to represent objects(e.g: a user with number of field like name, surname, age)
Hash Creation Commands
    hset: Sets field in the hash stored at key to value. If field already exists in the hash, it is overwritten.
    hget: Returns the value associated with field in the hash stored at key.
    hmset: Set Multiple values.
    hgetall: Returns all fields and values of the hash stored at key.
        First is field then its value again the field then its value
    hmget: Returns the values associated with the specified fields in the hash stored at key.
        Can use it to fetch values from multiple fields at a time
More on Hashes Commands
    HVALS: Returns all values in the hash stored at key.
    HKEYS: Returns all field names in the hash stored at key.
    HEXISTS: Returns if field is an existing field in the hash stored at key.
        Check particular field exist in our hash or not
        If not exist, return 0
        If exist, return 1
    HLEN: Returns the number of fields contained in the hash stored at key.
    HKEYS: Returns all field names in the hash stored at key.
    HSETNX: Sets field in the hash stored at key to value, only if field does not yet exist.
    HDEL: Removes the specified fields from the hash stored at key.
    HINCRBY: Increments the number stored at field in the hash stored at key by increment.
        HINCRBY command not designed for float numbers
        HINCRBY student height 1
            -> (error) ERR hash value is not an integer
        This command is designed to work on an integer
    HINCRBYFLOAT: Increment the specified field of a hash stored at key, and representing a floating point number, 
        by the specified increment.
        HINCRBYFLOAT can use to increment any type of number like integer or float
    HSTRLEN: Returns the string length of the value associated with field in the hash stored at key.

    ====================================================================

                Sets in Redis

About Sets in Redis
    Redis Sets are an unordered collection of string
    It is possible to add, remove, and test for existence of members 
    O(1) constant time regardless of the number of elements contained inside the Set 
    Can do unions, intersections, difference of sets in very short time
    Sets are unorganized they are unordered in this way so there is no particular order 
        in which our data be stored
Sets basic commands
    SADD: Add the specified members to the set stored at key.
    SMEMBERS: Returns all the members of the set value stored at key.
    SISMEMBER: Returns if member is a member of the set stored at key.
        Use to check particular member existence in pur set and if it does not exist we will get 0
        and if that member exist we will get 1
    SCARD: Returns the set cardinality (number of elements) of the set stored at key.
    SMOVE: Move member from the set at source to the set at destination.
    SPOP: Removes and returns one or more random elements from the set value store at key.
    SREM: Remove the specified members from the set stored at key.
Operation on Sets
    Difference of Set: The difference of two sets, written A - B is the set of all elements of A that
        are not elements of B 
    Intersection of Set: Intersection of two sets A and B is the set of all elements that both A and B
        have in common
    Union of Sets: The union of two sets A and B is the set of elements which are in A, in B or in both 
        A and B 
Operation on Sets Commands
    SDIFF: Returns the members of the set resulting from the difference between the first set and all the successive sets.
    SDIFFSTORE: This command is equal to SDIFF, but instead of returning the resulting set, it is stored in destination.
    SINTER: Returns the members of the set resulting from the intersection of all the given sets.
    SINTERSTORE: This command is equal to SINTER, but instead of returning the resulting set, it is stored in destination.
    SUNION: Returns the members of the set resulting from the union of all the given sets.
    SUNIONSTORE: This command is equal to SUNION, but instead of returning the resulting set, it is stored in destination.
    SRANDMEMBER: When called with just the key argument, return a random element from the set value stored at key.

    ====================================================================

                Sorted Sets in Redis

Introduction to Sorted Sets
    Sorted sets are a data type which is similar to a mix between a Set and Hash
    Like sets, sorted sets are composed of unique, non-repeating string elements, so in some sense a sorted set is a set
        as well
    Sorted sets elements are ordered
    Every element in a sorted set is associated with a floating point value, called the score(this is why the type is also
        similar to hash, since every element is mapped to value)
Working with zadd command
    ZADD: Create a new set or can add elements to existing sorted set.
        zadd key [NX|XX] [CH] [INCR] score member [score member ...]
        score can only be a floating point it can not be possible that we can assign string that will be not possible
        https://redis.io/commands/zadd  Refer this link to know more.
        Try: zadd students one Bob
            -> error Because score can not be string
        NX: This option we tell Redis that we do not want to update any existing elements what we want to do is we want to
            always add new elements to our sorted set
            zadd students nx 4 Andrew
            zadd students nx 5 Andrew -> can not update, it can update if not use "nx" option
        We can add many values on a particular score, ordered in alphabetical
        XX: Only update elements that already exist. Never add elements
        CH: Return an integer reply and that integer reply will tell us that how many elements have been changed using zadd 
            command
        INCR: Can increment value of score
            zadd name incr 2 Bob
                score of Bob will be increment 2 
    ZRANGE: Returns the specified range of elements in the sorted set stored at key.
Getting Started with basic commands
    ZCARD: Returns the sorted set cardinality (number of elements) of the sorted set stored at key.
    ZREM: Removes the specified members from the sorted set stored at key. Non existing members are ignored.
    ZSCORE: Returns the score of member in the sorted set at key.
    ZREVRANGE: Returns the specified range of elements in the sorted set stored at key. The elements are considered 
        to be ordered from the highest to the lowest score.
    ZRANK: Returns the rank of member in the sorted set stored at key, with the scores ordered from low to high. 
        The rank (or index) is 0-based, which means that the member with the lowest score has rank 0.
    ZREVRANK: Returns the rank of member in the sorted set stored at key, with the scores ordered from high to low. 
        The rank (or index) is 0-based, which means that the member with the highest score has rank 0.
    ZINCRBY: Increments the score of member in the sorted set stored at key by increment.
    ZCOUNT: Returns the number of elements in the sorted set at key with a score between min and max.

    ZPOPMAX: Removes and returns up to count members with the highest scores in the sorted set stored at key.
    ZPOPMIN: Removes and returns up to count members with the lowest scores in the sorted set stored at key.
Union and Intersection on Sorted Sets
    ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]
        numkeys: number of keys we are passing to this ZINTERSTORE command
        WEIGHTS: 
            WEIGHTS option, help us to specify a multiplication factor for each input sorted set
            This means that the score of every element in very input sorted set is multiplied by this factor
                before being passed to aggregation function
            When WEIGHTS is not given, the multiplication factors default to 1
        AGGREGATE:
            With the AGGREGATE option, it is possible to specify how the results of the intersection are aggregated
            It has three options Sum, Min and Max
            This option defaults to Sum, where the score of an element is summed across the inputs where it exists
            When this option is set to either Min or Max, the resulting set will contain the minimum or maximum score
    ZINTERSTORE: Computes the intersection of numkeys sorted sets given by the specified keys, and stores the result in destination.
    ZUNIONSTORE: Computes the union of numkeys sorted sets given by the specified keys, and stores the result in destination.
Wrapping up Sorted Sets Commands
    ZRANGEBYSCORE: Returns all the elements in the sorted set at key with a score between min and max
    ZRANGEBYLEX key min max [LIMIT offset count]
        Fetch my members based on alphabetical letters
        https://redis.io/commands/zrangebylex
        min: 
            -: Minus means all of the characters from starting 
        max:
            +: Plus means all of the characters until end
        min, max: 
            [: Indicates inclusive range. It means that we have to include that character in result
            (: Indicates that we have to exclude that character
    ZLEXCOUNT: When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, 
        this command returns the number of elements in the sorted set at key with a value between min and max.
    ZREVRANGEBYLEX: Apart from the reversed ordering, ZREVRANGEBYLEX is similar to ZRANGEBYLEX.
        ZREVRANGEBYLEX key max min [LIMIT offset count]
        start by max, end by min 
    ZREMRANGEBYLEX: When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, 
        this command removes all elements in the sorted set stored at key between the lexicographical range specified by min and max.
    ZREMRANGEBYRANK: Removes all elements in the sorted set stored at key with rank between start and stop.
    ZREMRANGEBYSCORE: Removes all elements in the sorted set stored at key with a score between min and max (inclusive).
    ZREVRANGEBYSCORE: Apart from the reversed ordering, ZREVRANGEBYSCORE is similar to ZRANGEBYSCORE.

    ====================================================================

                Transactions

About Transaction
    A Transaction in Redis consists of a block of commands
    MULTI, EXEC, DISCARD and WATCH are the foundation of Transactions in Redis
    All the commands in a Transaction are serialized and executed sequentially
    It can never happen that a request issued by another client is served in the middle of the execution of a Redis Transaction. This guarantees
        that the commands executed as a single isolated operation.
    Either all of the commands or none are processed, so a Redis Transaction is also atomic 
    If a client passed invalid command to the server in the context of a Transaction then none of the operations are performed 
Working with multi and exec
    multi: Start Transaction
    exec: Execute all of the commands that are currently in queue of our transaction
    Errors inside a transaction:
        During a transaction it is possible to encounter error
        A command may fail to be queued, so there may be an error before EXEC is called
    For instance the command may be syntactically wrong(wrong number of arguments, wrong command name...)
    A command may fail after EXEC is called, for instance since we performed an operation against a key with the wrong value(like calling a list
        operation against a string value)
Understanding Unwatch
    discard: This command can abort a transaction
    watch: Check and set behavior to redis transaction. Can monitor our keys to detect changes against them and if the watched key is modified
        before the exec command, the whole transaction aborts.
        It means watch check and set behaviorand if there is any change in key outside the transaction then watch restrict exec to execute, watch
            will not allow run the transaction
        watch
        ↓
        multi
        ↓
        exec
    unwatch: Telling redis that we do not want to monitor watched key 
        unwatch command does not need any argument, it flush all watched keys. Can not unwatch particular key
        watch
        ↓
        ~ some batch command
        ↓
        unwatch
        ↓
        multi
        ↓
        exec
    
    ====================================================================

                Publish/Subscribe

About Publish/ Subscribe
    Publish/ Subscribe
        It allows for simple message buses to be created
        This allows Redis to act as a broker for multiple clients providing a simple way to post and consume messages and events
    Working
        Senders(publishers) are not programmed to send their messages to specific receivers(subcribers)
        Rather, published messages are characterized into channels, without knowledge of what(if any) Subscribers there may be 
        Subscribers express interest in one or more channels, and only recieve messages that are of interest, without knowledge of 
            what(if any) publishers there are
Publish and Subscribe Commands
    publish channel message
        If someone subcribe channel later on after the message is sent, this message is discarded, this message will not be sent to 
            new subcriber
    subscribe channel
        Ctrl + C: Unsubcribe
Working with Patterned Subscription
    psubscribe pattern: Give pattern 
        ch*: We can recieve any message who start which ch channel(ch12, ch1314 and so on)
        ch?: We can replace any single character and it does not mean that multiple characters can be replaced
            message from ch1 channel is can recieve, message from ch12 channel is can not recieve
        ch[12e]: If any of the character matches in brackets like "1", "2", "e" allowing message to be sent
            message from also ch1 or ch2 or che channels is recieved
    pubsub subcommand: This command can do some administration tasks, pubsub command has subcommand command, using subcommand can check 
        out number of subcribers, can check out number of patterned subscriptions 
        Numsub(subcommand): Can check out number of subcribers for particular channel. It does check for number of subcribers for a 
            patterned subscription
            psubscribe ch[12e] -> can not check
            psubscribe ch1 -> can check
    
    ====================================================================

                Geospatial 

About Geospatial
    Redis uses a common strategy for managing geospatial objects. For each longitude and latitude pair, a Geospatial is computed
    A Geospatial is a 52 bit integer value in Redis
    GeoHash encodes positions in a short string of letters and didits
    GeoHash is the compact structure for storage, but allows for efficient queries to be performed
    Each GeoHash is stored in the named key. The data type of that key is a sorted set 
    The GeoHash is stored as the score, and the name of the point is used as the value of the member
    